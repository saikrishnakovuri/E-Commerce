{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91810\\\\OneDrive\\\\Desktop\\\\Project Main\\\\E-commercefrontend-1\\\\src\\\\context\\\\StateContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StateContext = /*#__PURE__*/createContext();\nconst initialState = {\n  isAuthenticated: false,\n  user: null,\n  products: [],\n  cart: null,\n  orders: [],\n  error: null\n};\nconst stateReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload.user\n      };\n    case 'LOGIN_FAIL':\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        error: action.payload.error\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null\n      };\n    case 'FETCH_PRODUCTS':\n      return {\n        ...state,\n        products: action.payload.products\n      };\n    case 'FETCH_CART':\n      return {\n        ...state,\n        cart: action.payload.cart\n      };\n    case 'FETCH_ORDERS':\n      return {\n        ...state,\n        orders: action.payload.orders\n      };\n    case 'CART_UPDATED':\n      return {\n        ...state,\n        cart: action.payload.cart\n      };\n    default:\n      return state;\n  }\n};\nexport const StateProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(stateReducer, initialState);\n  const login = async (username, password) => {\n    try {\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      if (response.ok) {\n        const token = await response.text();\n        localStorage.setItem('token', token);\n        // You might want to fetch user details here and dispatch them to the context\n        // For now, we'll just use the username\n        const user = {\n          username\n        }; // In a real app, you'd get the full user object\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: {\n            user\n          }\n        });\n        fetchCart(user.username); // Fetch cart after login\n      } else {\n        dispatch({\n          type: 'LOGIN_FAIL',\n          payload: {\n            error: 'Login failed'\n          }\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: 'LOGIN_FAIL',\n        payload: {\n          error: 'Login failed'\n        }\n      });\n    }\n  };\n  const fetchProducts = async () => {\n    try {\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/products`);\n      if (response.ok) {\n        const products = await response.json();\n        dispatch({\n          type: 'FETCH_PRODUCTS',\n          payload: {\n            products\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Failed to fetch products:', error);\n    }\n  };\n  const fetchCart = async userId => {\n    try {\n      // The backend expects a user ID, but we only have the username.\n      // This is a placeholder. In a real app, you would get the user ID after login.\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/cart/1`); // FIXME: Hardcoded user ID\n      if (response.ok) {\n        const cart = await response.json();\n        dispatch({\n          type: 'FETCH_CART',\n          payload: {\n            cart\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Failed to fetch cart:', error);\n    }\n  };\n  const addToCart = async (userId, productId, quantity) => {\n    try {\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/cart/${userId}/add/${productId}?quantity=${quantity}`, {\n        method: 'POST'\n      });\n      if (response.ok) {\n        const cart = await response.json();\n        dispatch({\n          type: 'CART_UPDATED',\n          payload: {\n            cart\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Failed to add to cart:', error);\n    }\n  };\n  const removeFromCart = async (userId, productId) => {\n    try {\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/cart/${userId}/remove/${productId}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        const cart = await response.json();\n        dispatch({\n          type: 'CART_UPDATED',\n          payload: {\n            cart\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Failed to remove from cart:', error);\n    }\n  };\n  const updateCartItemQuantity = async (cartItemId, quantity) => {\n    try {\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/cart-items/${cartItemId}/quantity/${quantity}`, {\n        method: 'PUT'\n      });\n      if (response.ok) {\n        // After updating a cart item, we should refetch the whole cart to ensure consistency\n        fetchCart(state.user.username); // FIXME: Hardcoded user ID\n      }\n    } catch (error) {\n      console.error('Failed to update cart item quantity:', error);\n    }\n  };\n  const fetchOrders = async () => {\n    try {\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/orders`);\n      if (response.ok) {\n        const orders = await response.json();\n        dispatch({\n          type: 'FETCH_ORDERS',\n          payload: {\n            orders\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Failed to fetch orders:', error);\n    }\n  };\n  useEffect(() => {\n    fetchProducts();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(StateContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      login,\n      fetchProducts,\n      fetchCart,\n      fetchOrders,\n      addToCart,\n      removeFromCart,\n      updateCartItemQuantity\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n_s(StateProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = StateProvider;\nexport const useStateContext = () => {\n  _s2();\n  return useContext(StateContext);\n};\n_s2(useStateContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"StateProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","StateContext","initialState","isAuthenticated","user","products","cart","orders","error","stateReducer","state","action","type","payload","StateProvider","children","_s","dispatch","login","username","password","response","fetch","import","meta","env","VITE_API_URL","method","headers","body","JSON","stringify","ok","token","text","localStorage","setItem","fetchCart","fetchProducts","json","console","userId","addToCart","productId","quantity","removeFromCart","updateCartItemQuantity","cartItemId","fetchOrders","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useStateContext","_s2","$RefreshReg$"],"sources":["C:/Users/91810/OneDrive/Desktop/Project Main/E-commercefrontend-1/src/context/StateContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\n\nconst StateContext = createContext();\n\nconst initialState = {\n  isAuthenticated: false,\n  user: null,\n  products: [],\n  cart: null,\n  orders: [],\n  error: null,\n};\n\nconst stateReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOGIN_SUCCESS':\n      return { ...state, isAuthenticated: true, user: action.payload.user };\n    case 'LOGIN_FAIL':\n      return { ...state, isAuthenticated: false, user: null, error: action.payload.error };\n    case 'LOGOUT':\n      return { ...state, isAuthenticated: false, user: null };\n    case 'FETCH_PRODUCTS':\n      return { ...state, products: action.payload.products };\n    case 'FETCH_CART':\n      return { ...state, cart: action.payload.cart };\n    case 'FETCH_ORDERS':\n      return { ...state, orders: action.payload.orders };\n    case 'CART_UPDATED':\n      return { ...state, cart: action.payload.cart };\n    default:\n      return state;\n  }\n};\n\nexport const StateProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(stateReducer, initialState);\n\n  const login = async (username, password) => {\n    try {\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/auth/login`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username, password }),\n      });\n      if (response.ok) {\n        const token = await response.text();\n        localStorage.setItem('token', token);\n        // You might want to fetch user details here and dispatch them to the context\n        // For now, we'll just use the username\n        const user = { username }; // In a real app, you'd get the full user object\n        dispatch({ type: 'LOGIN_SUCCESS', payload: { user } });\n        fetchCart(user.username); // Fetch cart after login\n      } else {\n        dispatch({ type: 'LOGIN_FAIL', payload: { error: 'Login failed' } });\n      }\n    } catch (error) {\n      dispatch({ type: 'LOGIN_FAIL', payload: { error: 'Login failed' } });\n    }\n  };\n\n  const fetchProducts = async () => {\n    try {\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/products`);\n      if (response.ok) {\n        const products = await response.json();\n        dispatch({ type: 'FETCH_PRODUCTS', payload: { products } });\n      }\n    } catch (error) {\n      console.error('Failed to fetch products:', error);\n    }\n  };\n\n  const fetchCart = async (userId) => {\n    try {\n      // The backend expects a user ID, but we only have the username.\n      // This is a placeholder. In a real app, you would get the user ID after login.\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/cart/1`); // FIXME: Hardcoded user ID\n      if (response.ok) {\n        const cart = await response.json();\n        dispatch({ type: 'FETCH_CART', payload: { cart } });\n      }\n    } catch (error) {\n      console.error('Failed to fetch cart:', error);\n    }\n  };\n\n  const addToCart = async (userId, productId, quantity) => {\n    try {\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/cart/${userId}/add/${productId}?quantity=${quantity}`, {\n        method: 'POST',\n      });\n      if (response.ok) {\n        const cart = await response.json();\n        dispatch({ type: 'CART_UPDATED', payload: { cart } });\n      }\n    } catch (error) {\n      console.error('Failed to add to cart:', error);\n    }\n  };\n\n  const removeFromCart = async (userId, productId) => {\n    try {\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/cart/${userId}/remove/${productId}`, {\n        method: 'DELETE',\n      });\n      if (response.ok) {\n        const cart = await response.json();\n        dispatch({ type: 'CART_UPDATED', payload: { cart } });\n      }\n    } catch (error) {\n      console.error('Failed to remove from cart:', error);\n    }\n  };\n\n  const updateCartItemQuantity = async (cartItemId, quantity) => {\n    try {\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/cart-items/${cartItemId}/quantity/${quantity}`, {\n        method: 'PUT',\n      });\n      if (response.ok) {\n        // After updating a cart item, we should refetch the whole cart to ensure consistency\n        fetchCart(state.user.username); // FIXME: Hardcoded user ID\n      }\n    } catch (error) {\n      console.error('Failed to update cart item quantity:', error);\n    }\n  };\n\n  const fetchOrders = async () => {\n    try {\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/orders`);\n      if (response.ok) {\n        const orders = await response.json();\n        dispatch({ type: 'FETCH_ORDERS', payload: { orders } });\n      }\n    } catch (error) {\n      console.error('Failed to fetch orders:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchProducts();\n  }, []);\n\n  return (\n    <StateContext.Provider value={{ state, dispatch, login, fetchProducts, fetchCart, fetchOrders, addToCart, removeFromCart, updateCartItemQuantity }}>\n      {children}\n    </StateContext.Provider>\n  );\n};\n\nexport const useStateContext = () => useContext(StateContext);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}