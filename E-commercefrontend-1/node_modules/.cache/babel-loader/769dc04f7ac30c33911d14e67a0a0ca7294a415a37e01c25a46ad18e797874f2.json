{"ast":null,"code":"import _objectSpread from\"C:/Users/91810/OneDrive/Desktop/Project Main/E-commercefrontend-1/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useReducer,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const StateContext=/*#__PURE__*/createContext();const initialState={isAuthenticated:false,user:null,products:[],cart:null,orders:[],error:null};const stateReducer=(state,action)=>{switch(action.type){case'LOGIN_SUCCESS':return _objectSpread(_objectSpread({},state),{},{isAuthenticated:true,user:action.payload.user});case'LOGIN_FAIL':return _objectSpread(_objectSpread({},state),{},{isAuthenticated:false,user:null,error:action.payload.error});case'LOGOUT':return _objectSpread(_objectSpread({},state),{},{isAuthenticated:false,user:null});case'FETCH_PRODUCTS':return _objectSpread(_objectSpread({},state),{},{products:action.payload.products});case'FETCH_CART':return _objectSpread(_objectSpread({},state),{},{cart:action.payload.cart});case'FETCH_ORDERS':return _objectSpread(_objectSpread({},state),{},{orders:action.payload.orders});case'CART_UPDATED':return _objectSpread(_objectSpread({},state),{},{cart:action.payload.cart});default:return state;}};export const StateProvider=_ref=>{let{children}=_ref;const[state,dispatch]=useReducer(stateReducer,initialState);const login=async(username,password)=>{try{const response=await fetch(\"\".concat(import.meta.env.VITE_API_URL,\"/auth/login\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({username,password})});if(response.ok){const token=await response.text();localStorage.setItem('token',token);// You might want to fetch user details here and dispatch them to the context\n// For now, we'll just use the username\nconst user={username};// In a real app, you'd get the full user object\ndispatch({type:'LOGIN_SUCCESS',payload:{user}});fetchCart(user.username);// Fetch cart after login\n}else{dispatch({type:'LOGIN_FAIL',payload:{error:'Login failed'}});}}catch(error){dispatch({type:'LOGIN_FAIL',payload:{error:'Login failed'}});}};const fetchProducts=async()=>{try{const response=await fetch(\"\".concat(import.meta.env.VITE_API_URL,\"/api/products\"));if(response.ok){const products=await response.json();dispatch({type:'FETCH_PRODUCTS',payload:{products}});}}catch(error){console.error('Failed to fetch products:',error);}};const fetchCart=async userId=>{try{// The backend expects a user ID, but we only have the username.\n// This is a placeholder. In a real app, you would get the user ID after login.\nconst response=await fetch(\"\".concat(import.meta.env.VITE_API_URL,\"/api/cart/1\"));// FIXME: Hardcoded user ID\nif(response.ok){const cart=await response.json();dispatch({type:'FETCH_CART',payload:{cart}});}}catch(error){console.error('Failed to fetch cart:',error);}};const addToCart=async(userId,productId,quantity)=>{try{const response=await fetch(\"\".concat(import.meta.env.VITE_API_URL,\"/api/cart/\").concat(userId,\"/add/\").concat(productId,\"?quantity=\").concat(quantity),{method:'POST'});if(response.ok){const cart=await response.json();dispatch({type:'CART_UPDATED',payload:{cart}});}}catch(error){console.error('Failed to add to cart:',error);}};const removeFromCart=async(userId,productId)=>{try{const response=await fetch(\"\".concat(import.meta.env.VITE_API_URL,\"/api/cart/\").concat(userId,\"/remove/\").concat(productId),{method:'DELETE'});if(response.ok){const cart=await response.json();dispatch({type:'CART_UPDATED',payload:{cart}});}}catch(error){console.error('Failed to remove from cart:',error);}};const updateCartItemQuantity=async(cartItemId,quantity)=>{try{const response=await fetch(\"\".concat(import.meta.env.VITE_API_URL,\"/api/cart-items/\").concat(cartItemId,\"/quantity/\").concat(quantity),{method:'PUT'});if(response.ok){const cartItem=await response.json();// After updating a cart item, we should refetch the whole cart to ensure consistency\nfetchCart(state.user.username);// FIXME: Hardcoded user ID\n}}catch(error){console.error('Failed to update cart item quantity:',error);}};const fetchOrders=async()=>{try{const response=await fetch(\"\".concat(import.meta.env.VITE_API_URL,\"/api/orders\"));if(response.ok){const orders=await response.json();dispatch({type:'FETCH_ORDERS',payload:{orders}});}}catch(error){console.error('Failed to fetch orders:',error);}};useEffect(()=>{fetchProducts();},[]);return/*#__PURE__*/_jsx(StateContext.Provider,{value:{state,dispatch,login,fetchProducts,fetchCart,fetchOrders,addToCart,removeFromCart,updateCartItemQuantity},children:children});};export const useStateContext=()=>useContext(StateContext);","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsx","_jsx","StateContext","initialState","isAuthenticated","user","products","cart","orders","error","stateReducer","state","action","type","_objectSpread","payload","StateProvider","_ref","children","dispatch","login","username","password","response","fetch","concat","import","meta","env","VITE_API_URL","method","headers","body","JSON","stringify","ok","token","text","localStorage","setItem","fetchCart","fetchProducts","json","console","userId","addToCart","productId","quantity","removeFromCart","updateCartItemQuantity","cartItemId","cartItem","fetchOrders","Provider","value","useStateContext"],"sources":["C:/Users/91810/OneDrive/Desktop/Project Main/E-commercefrontend-1/src/context/StateContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\n\nconst StateContext = createContext();\n\nconst initialState = {\n  isAuthenticated: false,\n  user: null,\n  products: [],\n  cart: null,\n  orders: [],\n  error: null,\n};\n\nconst stateReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOGIN_SUCCESS':\n      return { ...state, isAuthenticated: true, user: action.payload.user };\n    case 'LOGIN_FAIL':\n      return { ...state, isAuthenticated: false, user: null, error: action.payload.error };\n    case 'LOGOUT':\n      return { ...state, isAuthenticated: false, user: null };\n    case 'FETCH_PRODUCTS':\n      return { ...state, products: action.payload.products };\n    case 'FETCH_CART':\n      return { ...state, cart: action.payload.cart };\n    case 'FETCH_ORDERS':\n      return { ...state, orders: action.payload.orders };\n    case 'CART_UPDATED':\n      return { ...state, cart: action.payload.cart };\n    default:\n      return state;\n  }\n};\n\nexport const StateProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(stateReducer, initialState);\n\n  const login = async (username, password) => {\n    try {\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/auth/login`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username, password }),\n      });\n      if (response.ok) {\n        const token = await response.text();\n        localStorage.setItem('token', token);\n        // You might want to fetch user details here and dispatch them to the context\n        // For now, we'll just use the username\n        const user = { username }; // In a real app, you'd get the full user object\n        dispatch({ type: 'LOGIN_SUCCESS', payload: { user } });\n        fetchCart(user.username); // Fetch cart after login\n      } else {\n        dispatch({ type: 'LOGIN_FAIL', payload: { error: 'Login failed' } });\n      }\n    } catch (error) {\n      dispatch({ type: 'LOGIN_FAIL', payload: { error: 'Login failed' } });\n    }\n  };\n\n  const fetchProducts = async () => {\n    try {\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/products`);\n      if (response.ok) {\n        const products = await response.json();\n        dispatch({ type: 'FETCH_PRODUCTS', payload: { products } });\n      }\n    } catch (error) {\n      console.error('Failed to fetch products:', error);\n    }\n  };\n\n  const fetchCart = async (userId) => {\n    try {\n      // The backend expects a user ID, but we only have the username.\n      // This is a placeholder. In a real app, you would get the user ID after login.\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/cart/1`); // FIXME: Hardcoded user ID\n      if (response.ok) {\n        const cart = await response.json();\n        dispatch({ type: 'FETCH_CART', payload: { cart } });\n      }\n    } catch (error) {\n      console.error('Failed to fetch cart:', error);\n    }\n  };\n\n  const addToCart = async (userId, productId, quantity) => {\n    try {\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/cart/${userId}/add/${productId}?quantity=${quantity}`, {\n        method: 'POST',\n      });\n      if (response.ok) {\n        const cart = await response.json();\n        dispatch({ type: 'CART_UPDATED', payload: { cart } });\n      }\n    } catch (error) {\n      console.error('Failed to add to cart:', error);\n    }\n  };\n\n  const removeFromCart = async (userId, productId) => {\n    try {\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/cart/${userId}/remove/${productId}`, {\n        method: 'DELETE',\n      });\n      if (response.ok) {\n        const cart = await response.json();\n        dispatch({ type: 'CART_UPDATED', payload: { cart } });\n      }\n    } catch (error) {\n      console.error('Failed to remove from cart:', error);\n    }\n  };\n\n  const updateCartItemQuantity = async (cartItemId, quantity) => {\n    try {\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/cart-items/${cartItemId}/quantity/${quantity}`, {\n        method: 'PUT',\n      });\n      if (response.ok) {\n        const cartItem = await response.json();\n        // After updating a cart item, we should refetch the whole cart to ensure consistency\n        fetchCart(state.user.username); // FIXME: Hardcoded user ID\n      }\n    } catch (error) {\n      console.error('Failed to update cart item quantity:', error);\n    }\n  };\n\n  const fetchOrders = async () => {\n    try {\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/orders`);\n      if (response.ok) {\n        const orders = await response.json();\n        dispatch({ type: 'FETCH_ORDERS', payload: { orders } });\n      }\n    } catch (error) {\n      console.error('Failed to fetch orders:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchProducts();\n  }, []);\n\n  return (\n    <StateContext.Provider value={{ state, dispatch, login, fetchProducts, fetchCart, fetchOrders, addToCart, removeFromCart, updateCartItemQuantity }}>\n      {children}\n    </StateContext.Provider>\n  );\n};\n\nexport const useStateContext = () => useContext(StateContext);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}